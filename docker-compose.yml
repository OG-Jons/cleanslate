services:
  database:
    image: postgres:15
    restart: always
    container_name: database
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  graphql-server:
    image: hasura/graphql-engine:latest.cli-migrations-v3
    restart: always
    container_name: graphql-server
    ports:
      - '${HASURA_PORT:-8080}:8080'
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_CORS_DOMAIN: https://${NEXT_PUBLIC_HASURA_DOMAIN}
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@database:5432/postgres
      HASURA_GRAPHQL_DEV_MODE: true
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@database:5432/postgres
      PG_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/database
    volumes:
      - ./migrations:/hasura-migrations
      - ./metadata:/hasura-metadata
    depends_on:
      database:
        condition: service_healthy
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    labels:
      - "traefik.http.routers.fit_marschall_pro_router.rule=Host(`${NEXT_PUBLIC_HASURA_DOMAIN}`)"
      - "traefik.http.routers.fit_marschall_pro_router.entrypoints=web"
      - "traefik.http.routers.fit_marschall_pro_router.middlewares=fit_marschall_pro_headers"
      - "traefik.http.routers.fit_marschall_pro_router.service=fit_marschall_pro_service"
      - "traefik.http.middlewares.fit_marschall_pro_headers.headers.referrerPolicy=strict-origin"
      - "traefik.http.middlewares.fit_marschall_pro_headers.headers.strictTransportSecurity=max-age=31536000; includeSubDomains;"
      - "traefik.http.middlewares.fit_marschall_pro_headers.headers.xContentTypeOptions=nosniff"
      - "traefik.http.middlewares.fit_marschall_pro_headers.headers.xFrameOptions=DENY"
      - "traefik.http.middlewares.fit_marschall_pro_headers.headers.xxssProtection=1; mode=block;"
      - "traefik.http.middlewares.fit_marschall_pro_headers.headers.contentSecurityPolicy=default-src 'self'; script-src 'self' 'wasm-unsafe-eval' https://apis.google.com https://www.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; connect-src 'self' https://*.ingest.sentry.io https://identitytoolkit.googleapis.com https://securetoken.googleapis.com https://apis.google.com https://world.openfoodfacts.org; frame-src 'self' https://*.firebaseapp.com https://www.google.com; img-src 'self' https://www.gstatic.com data:; font-src 'self' https://fonts.gstatic.com https://fonts.googleapis.com; worker-src 'self'; object-src 'none';"
      - "traefik.http.middlewares.fit_marschall_pro_headers.headers.permissionsPolicy=accelerometer=(self), autoplay=(self), camera=(self), cross-origin-isolated=(self), display-capture=(self), encrypted-media=(self), fullscreen=(self), geolocation=(self), gyroscope=(self), keyboard-map=(self), magnetometer=(self), microphone=(self), midi=(self), payment=(self), picture-in-picture=(self), publickey-credentials-get=(self), screen-wake-lock=(self), sync-xhr=(self), usb=(self), xr-spatial-tracking=(self)"
      - "traefik.http.services.fit_marschall_pro_service.loadbalancer.server.port=${HASURA_PORT:-8080}"
      - "traefik.http.services.fit_marschall_pro_service.loadbalancer.server.scheme=http"
      - "traefik.http.services.fit_marschall_pro_service.loadbalancer.passhostheader=true"

  authentication-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    restart: always
    container_name: authentication-server
    ports:
      - '${AUTHENTICATION_SERVER_PORT:-3001}:3001'
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_PORT: ${HASURA_PORT:-8080}
      JWT_SIGNING_SECRET: ${JWT_SIGNING_SECRET}
      NEXT_PUBLIC_HASURA_DOMAIN: ${NEXT_PUBLIC_HASURA_DOMAIN}
      NEXT_PUBLIC_USE_FIREBASE: ${NEXT_PUBLIC_USE_FIREBASE}
    depends_on:
      - database
      - graphql-server
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  client:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_FIREBASE_CONFIG=${NEXT_PUBLIC_FIREBASE_CONFIG}
        - NEXT_PUBLIC_HASURA_DOMAIN=${NEXT_PUBLIC_HASURA_DOMAIN}
        - NEXT_PUBLIC_LEGAL_LINK=${NEXT_PUBLIC_LEGAL_LINK}
        - NEXT_PUBLIC_LOGIN_WITH_APPLE=${NEXT_PUBLIC_LOGIN_WITH_APPLE}
        - NEXT_PUBLIC_LOGIN_WITH_FACEBOOK=${NEXT_PUBLIC_LOGIN_WITH_FACEBOOK}
        - NEXT_PUBLIC_LOGIN_WITH_GITHUB=${NEXT_PUBLIC_LOGIN_WITH_GITHUB}
        - NEXT_PUBLIC_LOGIN_WITH_GOOGLE=${NEXT_PUBLIC_LOGIN_WITH_GOOGLE}
        - NEXT_PUBLIC_REACT_SENTRY_DSN=${NEXT_PUBLIC_REACT_SENTRY_DSN}
        - NEXT_PUBLIC_USE_FIREBASE=${NEXT_PUBLIC_USE_FIREBASE}
        - NEXT_PUBLIC_VERSION=${NEXT_PUBLIC_VERSION}
    restart: always
    container_name: client
    ports:
      - '${CLIENT_PORT:-3000}:3000'
    depends_on:
      - database
      - graphql-server
    extra_hosts:
      - 'host.docker.internal:host-gateway'

volumes:
  database:
